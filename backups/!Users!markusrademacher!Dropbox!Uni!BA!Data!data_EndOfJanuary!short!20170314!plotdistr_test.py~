import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns; sns.set(style="white", color_codes=True)
import os, fnmatch,csv
from matplotlib.backends.backend_pdf import PdfPages


#DataList=[]
'''
for root, dirs, files in os.walk(os.getcwd()):
    for file in files:
        if fnmatch.fnmatch(file,"distribution.dat"): 
            print(os.path.join(root, file))'''

'''with open('distribution.dat', 'rt') as f:
  reader = csv.reader(f, delimiter='\t', skipinitialspace=True)

  lineData = list()

  cols = next(reader)
  print(cols)

  for col in cols:
    # Create a list in lineData for each column of data.
    lineData.append(list())


  for line in reader:
    for i in range(0, len(lineData)):
      # Copy the data from the line into the correct columns.
      lineData[i].append(line[i])

  data = dict()
  data[initialDistr]=lineData[0]
  data[initialDistr_v]=lineData[1]
  data[EndDistr]=lineData[2]
  data[EndDistr_v]=lineData[3]

  for i in range(0, len(cols)):
    # Create each key in the dict with the data in its column.
    data[cols[i]] = lineData[i]

print(np.asarray(data['initialDistr']))'''
ROI=[286,28282,578,381,1199,326,443,765,2175]
with PdfPages('sine_test.pdf') as pdf_pages:
    for i in range(1, 2):
        print(i)
        data = np.loadtxt('oscillatorimprovedEuler.dat',delimiter='\t')
        #print(data[:,0])
        xint = pd.Series(data[:,0], name="$x$")
        vint = pd.Series(np.diff(data[:,0]/0.01)/np.sqrt(2/10), name="$v$")
        xend = pd.Series(data[:,0], name="$x$")
        vend = pd.Series(data[:,1]/np.sqrt(2/10), name="$v$")

        #ZArray = Z
        #ZVArray = _np.diff(ZArray)*(self.SampleFreq/FractionOfSampleFreq)
        VarXint=np.var(data[:,0])
        VarVint=np.var(data[:,1])
        MaxXint=np.max(data[:,0])
        MaxVint=np.max(data[:,1])
        freq=np.sqrt(2/10)
        
        if MaxXint>MaxVint/(2*np.pi*freq):
            _plotlimit=MaxXint*1.1
        else:
            _plotlimit=MaxVint/(2*np.pi*freq)*1.1
        
        JP1 = sns.jointplot(xint,vint,stat_func=None,xlim=[-_plotlimit,_plotlimit],ylim=[-_plotlimit,_plotlimit])
        '''JP1.ax_joint.text(np.mean(data[:,0]),MaxVint/(2*np.pi*freq)*1.2,
                          r"$\sigma_x=$ %.2Em, $\sigma_v=$ %.2Em"%(VarXint,VarVint),
                          horizontalalignment='center')
        #JP1.ax_joint.text(_np.mean(ZArray),MaxZV/(2*_np.pi*zf)*1.6,
        #                  "filepath=%s"%(self.filepath),
        #                  horizontalalignment='center')'''
        
        #JG1 = sns.jointplot(xint, vint, kind='kde',xlim={-1.5e-9,1.5e-9},ylim={-0.015,0.015}) #,stat_func=None
        #JG1 = sns.jointplot(xint, vint, kind="kde", color="m")
        #JG1.plot_joint(plt.scatter, c="w", s=10, linewidth=0.5, marker="+")
        #JG1.ax_joint.collections[0].set_alpha(0)
        #JG1.set_axis_labels("$X$", "$Y$");
        """JP1.ax_joint.text(0,0.025,
                          'Distribution at the beginning of \n %.2fµs cooling cycle' %(ROI[i-1]/(12.5)),
                          horizontalalignment='center')
        JP1.ax_joint.text(-2.25e-9,0.035,
                          'Experimental Data',
                          horizontalalignment='center',
                          fontsize=20)
        JP1.ax_joint.text(-2.25e-9 ,0.032,
                          'cooling factor = 5.17631, Q=47, ω=2π*292532Hz',
                          horizontalalignment='center')"""
        JP2 = sns.jointplot(xend, vend,stat_func=None,xlim=[-_plotlimit,_plotlimit],ylim=[-_plotlimit,_plotlimit])
        '''JP2.ax_joint.text(0,0.0033, 
                         'Distribution at the end of \n %.2fµs cooling cycle' %(ROI[i-1]/(12.5)),
                          horizontalalignment='center')'''
       
        #subplots migration
        f = plt.figure()

        for J in [JP1, JP2]:
            for A in J.fig.axes:
                f._axstack.add(f._make_key(A), A)
                #print(A)
        #subplots size adjustment
        f.axes[0].set_position([0.10, 0.10, 0.3,  0.3])
        f.axes[1].set_position([0.10, 0.40, 0.3,  0.05])
        f.axes[2].set_position([0.40, 0.10, 0.05, 0.3])
        f.axes[3].set_position([0.55, 0.10, 0.3,  0.3])
        f.axes[4].set_position([0.55, 0.40, 0.3,  0.05])
        f.axes[5].set_position([0.85, 0.10, 0.05, 0.3])
        '''fig = plt.figure()
        ax1 = fig.add_subplot(121)
        sns.jointplot(xint,vint,kind="kde",dropna=True, ax=ax1)
        ax2 = fig.add_subplot(122)
        sns.jointplot(xend,vend,kind="kde",dropna=True, ax=ax2)
'''
        
       
        pdf_pages.savefig()
        plt.close('all')
'''data = np.loadtxt('distribution_run2.dat',delimiter='\t')
#print(data[:,0])
x = pd.Series(data[:,2], name="$x$")
v = pd.Series(data[:,3], name="$v$")

sns.jointplot(x,v,kind="kde")
'''
#tips = sns.load_dataset("tips")
#g = sns.jointplot(x="total_bill", y="tip", data=tips)'''

